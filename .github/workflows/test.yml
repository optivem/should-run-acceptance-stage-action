name: Test Action

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: read
  actions: read

jobs:
  test-action:
    runs-on: ubuntu-latest
    name: Test the action
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Create test Docker inspect data
        id: test-data
        run: |
          # Create a sample Docker inspect JSON with current timestamp
          INSPECT_DATA='{
            "Id": "sha256:797cc00f91cabe4c89617485426c7aa71ca46c3c8a87328a663c2287f8dbb4b5",
            "RepoTags": ["test/image:latest"],
            "Created": "'$(date -u +"%Y-%m-%dT%H:%M:%S.%6NZ")'",
            "Config": { "Labels": null }
          }'
          echo "inspect-data=$INSPECT_DATA" >> $GITHUB_OUTPUT
        
      - name: Test action with force-run enabled
        id: test-force
        uses: ./
        with:
          acceptance-stage-repo-owner: ${{ github.repository_owner }}
          acceptance-stage-repo-name: ${{ github.event.repository.name }}
          inspect-data-result: '${{ steps.test-data.outputs.inspect-data }}'
          acceptance-stage-workflow-name: 'test.yml'
          force-run: 'true'
          
      - name: Verify force-run outputs
        run: |
          echo "Should run: ${{ steps.test-force.outputs.should-run }}"
          echo "Reason: ${{ steps.test-force.outputs.reason }}"
          if [ "${{ steps.test-force.outputs.should-run }}" != "true" ]; then
            echo "❌ Force run should always return true"
            exit 1
          fi
          if [ "${{ steps.test-force.outputs.reason }}" != "force-run" ]; then
            echo "❌ Force run should have reason 'force-run'"
            exit 1
          fi
          echo "✅ Force run test passed"
          
      - name: Test action with normal mode (new image)
        id: test-normal
        uses: ./
        with:
          acceptance-stage-repo-owner: ${{ github.repository_owner }}
          acceptance-stage-repo-name: ${{ github.event.repository.name }}
          inspect-data-result: '${{ steps.test-data.outputs.inspect-data }}'
          acceptance-stage-workflow-name: 'test.yml'
          force-run: 'false'
          
      - name: Verify normal mode outputs
        run: |
          echo "Should run: ${{ steps.test-normal.outputs.should-run }}"
          echo "Reason: ${{ steps.test-normal.outputs.reason }}"
          echo "Error message: ${{ steps.test-normal.outputs.error-message }}"
          # Since we're using a current timestamp, it should run (new image)
          if [ "${{ steps.test-normal.outputs.should-run }}" == "true" ]; then
            echo "✅ Normal mode test passed (new image detected)"
          else
            echo "⚠️ Normal mode returned false - this could be expected if no recent workflow runs"
          fi

  test-different-os:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    name: Test on ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Test action on ${{ matrix.os }}
        uses: ./
        with:
          acceptance-stage-repo-owner: ${{ github.repository_owner }}
          acceptance-stage-repo-name: ${{ github.event.repository.name }}
          inspect-data-result: '{"Id": "sha256:test", "Created": "2025-10-10T14:34:00.820799895Z", "RepoTags": ["test:latest"]}'
          acceptance-stage-workflow-name: 'test.yml'
          force-run: 'true'
          
  lint-powershell:
    runs-on: ubuntu-latest
    name: Lint PowerShell
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Install PSScriptAnalyzer
        shell: pwsh
        run: |
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
          
      - name: Lint PowerShell script
        shell: pwsh
        run: |
          $results = Invoke-ScriptAnalyzer -Path ./action.ps1 -Severity Warning,Error
          if ($results.Count -gt 0) {
            $results | Format-Table -AutoSize
            throw "PowerShell linting failed with $($results.Count) issues"
          }
          Write-Host "✅ PowerShell linting passed"